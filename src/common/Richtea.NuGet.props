<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <Authors>Rich Tebb</Authors>
        <!-- Note: Copyright property is not specific to NuGet so we set it elsewhere -->

        <!-- TODO: figure out a way to set the below properties.
        <RepositoryUrl>https://github.com/$(GitHubOrg)/$(GitHubProject).git</RepositoryUrl>
        <PackageProjectUrl>https://github.com/$(GitHubOrg)/$(GitHubProject)</PackageProjectUrl>
        <PackageReleaseNotes>See https://github.com/$(GitHubOrg)/$(GitHubProject)/releases/</PackageReleaseNotes>
        <RepositoryType>git</RepositoryType>  
        <PublishRepositoryUrl>true</PublishRepositoryUrl>
        <EmbedUntrackedSources>true</EmbedUntrackedSources>
        <IncludeSymbols>true</IncludeSymbols>
        -->
        <SymbolPackageFormat>snupkg</SymbolPackageFormat>
        <Deterministic>true</Deterministic>
        <!-- https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml#system-variables -->
        <ContinuousIntegrationBuild Condition="'$(TF_BUILD)' == 'true' Or '$(CI)' == 'true'">True</ContinuousIntegrationBuild>
    </PropertyGroup>

    <!--
        The Richtea.RecommendedPractices NuGet package presumes that the icon lives in
        the project directory, and is called PackageIcon.png. You can disable this
        presumption by setting this property:
        <RtDisableDefaultPackageIconInclusion>true</RtDisableDefaultPackageIconInclusion>
        If you do this, you must ensure that a PackageIcon.png is added to the packaged output by
        other means.
        As long as you haven't disabled this behaviour with the property shown above (or
        by setting <IsPackable>false</IsPackable> because you're not building a package)
        we check for the existence of PackageIcon.png in the project folder, and if it doesn't
        exist, we copy a default icon into place. (This is done by Richtea.NuGet.targets.)
        The following PropertyGroup and ItemGroup arrange to use that solution-level package
        icon. These are conditional on the existence of the file, because otherwise we get
        some baffling first-use behaviour: the package icon file will appear in Solution
        Explorer but with a red X by it, because the file doesn't exist yet. We don't get
        an opportunity to copy the default icon file into place until the first time a
        build runs. And unfortunately that error icon doesn't go away even after the file gets
        created - you have to unload and reload the solution after building it, which is
        non-obvious and annoying. So instead, if the file's not there yet, we don't
        attempt to use it. This means that the PackageIcon.png file won't show up in
        Solution Explorer to start with - it requires a build-unload-reload to make it
        appear. (The first build creates it, then unloading and reloading the
        solution is necessary for Solution Explorer to notice the change.) But this way
        it's less obtrusive - instead of getting a big red X, you just don't see the
        PackageIcon.png to begin with.
      -->

    <PropertyGroup Condition="($(IsPackable) != 'false') and ($(RtDisableDefaultPackageIconInclusion) != 'true') and (Exists('$(RtRootDir)PackageIcon.png'))">
        <PackageIcon>PackageIcon.png</PackageIcon>
    </PropertyGroup>

    <ItemGroup Condition="($(IsPackable) != 'false') and ($(RtDisableDefaultPackageIconInclusion) != 'true') and (Exists('$(RtRootDir)PackageIcon.png'))">
        <None Include="PackageIcon.png" Pack="true" PackagePath="\" />
    </ItemGroup>

</Project>